# Copyright 2021 IBM Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# coding: utf-8

"""
    MLX API

    MLX API Extension for Kubeflow Pipelines  # noqa: E501

    OpenAPI spec version: 0.1.29-filter-categories
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ApiCatalogUploadResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'components': 'list[ApiComponent]',
        'datasets': 'list[ApiDataset]',
        'models': 'list[ApiModel]',
        'notebooks': 'list[ApiNotebook]',
        'pipelines': 'list[ApiPipeline]',
        'total_size': 'int',
        'next_page_token': 'str',
        'errors': 'list[ApiCatalogUploadError]',
        'total_errors': 'int',
        'total_created': 'int'
    }

    attribute_map = {
        'components': 'components',
        'datasets': 'datasets',
        'models': 'models',
        'notebooks': 'notebooks',
        'pipelines': 'pipelines',
        'total_size': 'total_size',
        'next_page_token': 'next_page_token',
        'errors': 'errors',
        'total_errors': 'total_errors',
        'total_created': 'total_created'
    }

    def __init__(self, components=None, datasets=None, models=None, notebooks=None, pipelines=None, total_size=None, next_page_token=None, errors=None, total_errors=None, total_created=None):  # noqa: E501
        """ApiCatalogUploadResponse - a model defined in Swagger"""  # noqa: E501

        self._components = None
        self._datasets = None
        self._models = None
        self._notebooks = None
        self._pipelines = None
        self._total_size = None
        self._next_page_token = None
        self._errors = None
        self._total_errors = None
        self._total_created = None
        self.discriminator = None

        if components is not None:
            self.components = components
        if datasets is not None:
            self.datasets = datasets
        if models is not None:
            self.models = models
        if notebooks is not None:
            self.notebooks = notebooks
        if pipelines is not None:
            self.pipelines = pipelines
        if total_size is not None:
            self.total_size = total_size
        if next_page_token is not None:
            self.next_page_token = next_page_token
        if errors is not None:
            self.errors = errors
        if total_errors is not None:
            self.total_errors = total_errors
        if total_created is not None:
            self.total_created = total_created

    @property
    def components(self):
        """Gets the components of this ApiCatalogUploadResponse.  # noqa: E501


        :return: The components of this ApiCatalogUploadResponse.  # noqa: E501
        :rtype: list[ApiComponent]
        """
        return self._components

    @components.setter
    def components(self, components):
        """Sets the components of this ApiCatalogUploadResponse.


        :param components: The components of this ApiCatalogUploadResponse.  # noqa: E501
        :type: list[ApiComponent]
        """

        self._components = components

    @property
    def datasets(self):
        """Gets the datasets of this ApiCatalogUploadResponse.  # noqa: E501


        :return: The datasets of this ApiCatalogUploadResponse.  # noqa: E501
        :rtype: list[ApiDataset]
        """
        return self._datasets

    @datasets.setter
    def datasets(self, datasets):
        """Sets the datasets of this ApiCatalogUploadResponse.


        :param datasets: The datasets of this ApiCatalogUploadResponse.  # noqa: E501
        :type: list[ApiDataset]
        """

        self._datasets = datasets

    @property
    def models(self):
        """Gets the models of this ApiCatalogUploadResponse.  # noqa: E501


        :return: The models of this ApiCatalogUploadResponse.  # noqa: E501
        :rtype: list[ApiModel]
        """
        return self._models

    @models.setter
    def models(self, models):
        """Sets the models of this ApiCatalogUploadResponse.


        :param models: The models of this ApiCatalogUploadResponse.  # noqa: E501
        :type: list[ApiModel]
        """

        self._models = models

    @property
    def notebooks(self):
        """Gets the notebooks of this ApiCatalogUploadResponse.  # noqa: E501


        :return: The notebooks of this ApiCatalogUploadResponse.  # noqa: E501
        :rtype: list[ApiNotebook]
        """
        return self._notebooks

    @notebooks.setter
    def notebooks(self, notebooks):
        """Sets the notebooks of this ApiCatalogUploadResponse.


        :param notebooks: The notebooks of this ApiCatalogUploadResponse.  # noqa: E501
        :type: list[ApiNotebook]
        """

        self._notebooks = notebooks

    @property
    def pipelines(self):
        """Gets the pipelines of this ApiCatalogUploadResponse.  # noqa: E501


        :return: The pipelines of this ApiCatalogUploadResponse.  # noqa: E501
        :rtype: list[ApiPipeline]
        """
        return self._pipelines

    @pipelines.setter
    def pipelines(self, pipelines):
        """Sets the pipelines of this ApiCatalogUploadResponse.


        :param pipelines: The pipelines of this ApiCatalogUploadResponse.  # noqa: E501
        :type: list[ApiPipeline]
        """

        self._pipelines = pipelines

    @property
    def total_size(self):
        """Gets the total_size of this ApiCatalogUploadResponse.  # noqa: E501


        :return: The total_size of this ApiCatalogUploadResponse.  # noqa: E501
        :rtype: int
        """
        return self._total_size

    @total_size.setter
    def total_size(self, total_size):
        """Sets the total_size of this ApiCatalogUploadResponse.


        :param total_size: The total_size of this ApiCatalogUploadResponse.  # noqa: E501
        :type: int
        """

        self._total_size = total_size

    @property
    def next_page_token(self):
        """Gets the next_page_token of this ApiCatalogUploadResponse.  # noqa: E501


        :return: The next_page_token of this ApiCatalogUploadResponse.  # noqa: E501
        :rtype: str
        """
        return self._next_page_token

    @next_page_token.setter
    def next_page_token(self, next_page_token):
        """Sets the next_page_token of this ApiCatalogUploadResponse.


        :param next_page_token: The next_page_token of this ApiCatalogUploadResponse.  # noqa: E501
        :type: str
        """

        self._next_page_token = next_page_token

    @property
    def errors(self):
        """Gets the errors of this ApiCatalogUploadResponse.  # noqa: E501


        :return: The errors of this ApiCatalogUploadResponse.  # noqa: E501
        :rtype: list[ApiCatalogUploadError]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this ApiCatalogUploadResponse.


        :param errors: The errors of this ApiCatalogUploadResponse.  # noqa: E501
        :type: list[ApiCatalogUploadError]
        """

        self._errors = errors

    @property
    def total_errors(self):
        """Gets the total_errors of this ApiCatalogUploadResponse.  # noqa: E501


        :return: The total_errors of this ApiCatalogUploadResponse.  # noqa: E501
        :rtype: int
        """
        return self._total_errors

    @total_errors.setter
    def total_errors(self, total_errors):
        """Sets the total_errors of this ApiCatalogUploadResponse.


        :param total_errors: The total_errors of this ApiCatalogUploadResponse.  # noqa: E501
        :type: int
        """

        self._total_errors = total_errors

    @property
    def total_created(self):
        """Gets the total_created of this ApiCatalogUploadResponse.  # noqa: E501


        :return: The total_created of this ApiCatalogUploadResponse.  # noqa: E501
        :rtype: int
        """
        return self._total_created

    @total_created.setter
    def total_created(self, total_created):
        """Sets the total_created of this ApiCatalogUploadResponse.


        :param total_created: The total_created of this ApiCatalogUploadResponse.  # noqa: E501
        :type: int
        """

        self._total_created = total_created

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApiCatalogUploadResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiCatalogUploadResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
