# Copyright 2021 IBM Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# coding: utf-8

"""
    MLX API

    MLX API Extension for Kubeflow Pipelines  # noqa: E501

    OpenAPI spec version: 0.1.27-pipeline-namespace
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.api_pipeline_custom import ApiPipelineCustom  # noqa: F401,E501
from swagger_client.models.dictionary import Dictionary  # noqa: F401,E501


class ApiPipelineCustomRunPayload(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'custom_pipeline': 'ApiPipelineCustom',
        'run_parameters': 'Dictionary'
    }

    attribute_map = {
        'custom_pipeline': 'custom_pipeline',
        'run_parameters': 'run_parameters'
    }

    def __init__(self, custom_pipeline=None, run_parameters=None):  # noqa: E501
        """ApiPipelineCustomRunPayload - a model defined in Swagger"""  # noqa: E501

        self._custom_pipeline = None
        self._run_parameters = None
        self.discriminator = None

        if custom_pipeline is not None:
            self.custom_pipeline = custom_pipeline
        if run_parameters is not None:
            self.run_parameters = run_parameters

    @property
    def custom_pipeline(self):
        """Gets the custom_pipeline of this ApiPipelineCustomRunPayload.  # noqa: E501


        :return: The custom_pipeline of this ApiPipelineCustomRunPayload.  # noqa: E501
        :rtype: ApiPipelineCustom
        """
        return self._custom_pipeline

    @custom_pipeline.setter
    def custom_pipeline(self, custom_pipeline):
        """Sets the custom_pipeline of this ApiPipelineCustomRunPayload.


        :param custom_pipeline: The custom_pipeline of this ApiPipelineCustomRunPayload.  # noqa: E501
        :type: ApiPipelineCustom
        """

        self._custom_pipeline = custom_pipeline

    @property
    def run_parameters(self):
        """Gets the run_parameters of this ApiPipelineCustomRunPayload.  # noqa: E501


        :return: The run_parameters of this ApiPipelineCustomRunPayload.  # noqa: E501
        :rtype: Dictionary
        """
        return self._run_parameters

    @run_parameters.setter
    def run_parameters(self, run_parameters):
        """Sets the run_parameters of this ApiPipelineCustomRunPayload.


        :param run_parameters: The run_parameters of this ApiPipelineCustomRunPayload.  # noqa: E501
        :type: Dictionary
        """

        self._run_parameters = run_parameters

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApiPipelineCustomRunPayload, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiPipelineCustomRunPayload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
