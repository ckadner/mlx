# Copyright 2021 IBM Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# coding: utf-8

"""
    MLX API

    MLX API Extension for Kubeflow Pipelines  # noqa: E501

    OpenAPI spec version: 0.1.29-filter-categories
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ApiRunCodeResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'run_url': 'str',
        'run_output_location': 'str'
    }

    attribute_map = {
        'run_url': 'run_url',
        'run_output_location': 'run_output_location'
    }

    def __init__(self, run_url=None, run_output_location=None):  # noqa: E501
        """ApiRunCodeResponse - a model defined in Swagger"""  # noqa: E501

        self._run_url = None
        self._run_output_location = None
        self.discriminator = None

        self.run_url = run_url
        if run_output_location is not None:
            self.run_output_location = run_output_location

    @property
    def run_url(self):
        """Gets the run_url of this ApiRunCodeResponse.  # noqa: E501

        The URL path to view the run details in the Kubeflow Pipeline Web UI  # noqa: E501

        :return: The run_url of this ApiRunCodeResponse.  # noqa: E501
        :rtype: str
        """
        return self._run_url

    @run_url.setter
    def run_url(self, run_url):
        """Sets the run_url of this ApiRunCodeResponse.

        The URL path to view the run details in the Kubeflow Pipeline Web UI  # noqa: E501

        :param run_url: The run_url of this ApiRunCodeResponse.  # noqa: E501
        :type: str
        """
        if run_url is None:
            raise ValueError("Invalid value for `run_url`, must not be `None`")  # noqa: E501

        self._run_url = run_url

    @property
    def run_output_location(self):
        """Gets the run_output_location of this ApiRunCodeResponse.  # noqa: E501

        The location of the output artifacts produced by the run, if any.  # noqa: E501

        :return: The run_output_location of this ApiRunCodeResponse.  # noqa: E501
        :rtype: str
        """
        return self._run_output_location

    @run_output_location.setter
    def run_output_location(self, run_output_location):
        """Sets the run_output_location of this ApiRunCodeResponse.

        The location of the output artifacts produced by the run, if any.  # noqa: E501

        :param run_output_location: The run_output_location of this ApiRunCodeResponse.  # noqa: E501
        :type: str
        """

        self._run_output_location = run_output_location

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApiRunCodeResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiRunCodeResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
