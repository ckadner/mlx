# Copyright 2021 The MLX Contributors
#
# SPDX-License-Identifier: Apache-2.0
# coding: utf-8

"""
    MLX API

    MLX API Extension for Kubeflow Pipelines  # noqa: E501

    OpenAPI spec version: 0.1.29-filter-categories
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ApiPipelineExtension(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'annotations': 'dict(str, str)',
        'featured': 'bool',
        'publish_approved': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'annotations': 'annotations',
        'featured': 'featured',
        'publish_approved': 'publish_approved'
    }

    def __init__(self, id=None, annotations=None, featured=None, publish_approved=None):  # noqa: E501
        """ApiPipelineExtension - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._annotations = None
        self._featured = None
        self._publish_approved = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if annotations is not None:
            self.annotations = annotations
        if featured is not None:
            self.featured = featured
        if publish_approved is not None:
            self.publish_approved = publish_approved

    @property
    def id(self):
        """Gets the id of this ApiPipelineExtension.  # noqa: E501


        :return: The id of this ApiPipelineExtension.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ApiPipelineExtension.


        :param id: The id of this ApiPipelineExtension.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def annotations(self):
        """Gets the annotations of this ApiPipelineExtension.  # noqa: E501


        :return: The annotations of this ApiPipelineExtension.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations):
        """Sets the annotations of this ApiPipelineExtension.


        :param annotations: The annotations of this ApiPipelineExtension.  # noqa: E501
        :type: dict(str, str)
        """

        self._annotations = annotations

    @property
    def featured(self):
        """Gets the featured of this ApiPipelineExtension.  # noqa: E501


        :return: The featured of this ApiPipelineExtension.  # noqa: E501
        :rtype: bool
        """
        return self._featured

    @featured.setter
    def featured(self, featured):
        """Sets the featured of this ApiPipelineExtension.


        :param featured: The featured of this ApiPipelineExtension.  # noqa: E501
        :type: bool
        """

        self._featured = featured

    @property
    def publish_approved(self):
        """Gets the publish_approved of this ApiPipelineExtension.  # noqa: E501


        :return: The publish_approved of this ApiPipelineExtension.  # noqa: E501
        :rtype: bool
        """
        return self._publish_approved

    @publish_approved.setter
    def publish_approved(self, publish_approved):
        """Sets the publish_approved of this ApiPipelineExtension.


        :param publish_approved: The publish_approved of this ApiPipelineExtension.  # noqa: E501
        :type: bool
        """

        self._publish_approved = publish_approved

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApiPipelineExtension, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiPipelineExtension):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
