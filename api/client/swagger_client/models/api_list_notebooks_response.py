# Copyright 2021 IBM Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# coding: utf-8

"""
    MLX API

    MLX API Extension for Kubeflow Pipelines  # noqa: E501

    OpenAPI spec version: 0.1.27-pipeline-namespace
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.api_notebook import ApiNotebook  # noqa: F401,E501


class ApiListNotebooksResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'notebooks': 'list[ApiNotebook]',
        'total_size': 'int',
        'next_page_token': 'str'
    }

    attribute_map = {
        'notebooks': 'notebooks',
        'total_size': 'total_size',
        'next_page_token': 'next_page_token'
    }

    def __init__(self, notebooks=None, total_size=None, next_page_token=None):  # noqa: E501
        """ApiListNotebooksResponse - a model defined in Swagger"""  # noqa: E501

        self._notebooks = None
        self._total_size = None
        self._next_page_token = None
        self.discriminator = None

        if notebooks is not None:
            self.notebooks = notebooks
        if total_size is not None:
            self.total_size = total_size
        if next_page_token is not None:
            self.next_page_token = next_page_token

    @property
    def notebooks(self):
        """Gets the notebooks of this ApiListNotebooksResponse.  # noqa: E501


        :return: The notebooks of this ApiListNotebooksResponse.  # noqa: E501
        :rtype: list[ApiNotebook]
        """
        return self._notebooks

    @notebooks.setter
    def notebooks(self, notebooks):
        """Sets the notebooks of this ApiListNotebooksResponse.


        :param notebooks: The notebooks of this ApiListNotebooksResponse.  # noqa: E501
        :type: list[ApiNotebook]
        """

        self._notebooks = notebooks

    @property
    def total_size(self):
        """Gets the total_size of this ApiListNotebooksResponse.  # noqa: E501


        :return: The total_size of this ApiListNotebooksResponse.  # noqa: E501
        :rtype: int
        """
        return self._total_size

    @total_size.setter
    def total_size(self, total_size):
        """Sets the total_size of this ApiListNotebooksResponse.


        :param total_size: The total_size of this ApiListNotebooksResponse.  # noqa: E501
        :type: int
        """

        self._total_size = total_size

    @property
    def next_page_token(self):
        """Gets the next_page_token of this ApiListNotebooksResponse.  # noqa: E501


        :return: The next_page_token of this ApiListNotebooksResponse.  # noqa: E501
        :rtype: str
        """
        return self._next_page_token

    @next_page_token.setter
    def next_page_token(self, next_page_token):
        """Sets the next_page_token of this ApiListNotebooksResponse.


        :param next_page_token: The next_page_token of this ApiListNotebooksResponse.  # noqa: E501
        :type: str
        """

        self._next_page_token = next_page_token

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApiListNotebooksResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiListNotebooksResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
