# Copyright 2021 The MLX Contributors
#
# SPDX-License-Identifier: Apache-2.0
---
swagger: "2.0"
info:
  description: "MLX API Extension for Kubeflow Pipelines"
  version: "0.1.29-elyra-notebook-update"
  title: "MLX API"
basePath: "/apis/v1alpha1"
schemes:
- "http"
paths:
  /health_check:
    get:
      tags:
      - "HealthCheck"
      summary: "Checks if the server is running"
      operationId: "health_check"
      parameters:
      - name: "check_database"
        in: "query"
        description: "Test connection to MySQL database"
        required: false
        type: "boolean"
        allowEmptyValue: true
      - name: "check_object_store"
        in: "query"
        description: "Test connection to Minio object store"
        required: false
        type: "boolean"
        allowEmptyValue: true
      responses:
        "200":
          description: "Server is healthy"
        default:
          description: "Something is wrong"
          schema:
            $ref: "#/definitions/apiStatus"
      security: []
      x-swagger-router-controller: "swagger_server.controllers.health_check_controller"
  /settings:
    get:
      tags:
      - "ApplicationSettings"
      description: "Returns the application settings."
      operationId: "get_application_settings"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiSettings"
        default:
          description: "Something went wrong."
          schema:
            $ref: "#/definitions/apiStatus"
      x-swagger-router-controller: "swagger_server.controllers.application_settings_controller"
    post:
      tags:
      - "ApplicationSettings"
      description: "Set and store the application settings."
      operationId: "set_application_settings"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "settings"
        required: true
        schema:
          $ref: "#/definitions/apiSettings"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiSettings"
        default:
          description: "Something went wrong."
          schema:
            $ref: "#/definitions/apiStatus"
      x-swagger-router-controller: "swagger_server.controllers.application_settings_controller"
    put:
      tags:
      - "ApplicationSettings"
      description: "Modify one or more of the application settings."
      operationId: "modify_application_settings"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "dictionary"
        description: "A dictionary where the name of the keys corresponds to the name\
          \ of the settings."
        required: true
        schema:
          $ref: "#/definitions/dictionary"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiSettings"
        default:
          description: "Something went wrong."
          schema:
            $ref: "#/definitions/apiStatus"
      x-swagger-router-controller: "swagger_server.controllers.application_settings_controller"
  /catalog:
    get:
      tags:
      - "CatalogService"
      operationId: "list_all_assets"
      parameters:
      - name: "page_token"
        in: "query"
        required: false
        type: "string"
      - name: "page_size"
        in: "query"
        required: false
        type: "integer"
        format: "int32"
      - name: "sort_by"
        in: "query"
        description: "Can be format of \"field_name\", \"field_name asc\" or \"field_name\
          \ desc\"\nAscending by default."
        required: false
        type: "string"
        x-nullable: true
      - name: "filter"
        in: "query"
        description: "A string-serialized JSON dictionary with key-value pairs that\
          \ correspond to the ApiComponent's attribute names and their respective\
          \ values to be filtered for."
        required: false
        type: "string"
        x-nullable: true
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiListCatalogItemsResponse"
        default:
          description: ""
          schema:
            $ref: "#/definitions/apiStatus"
      x-swagger-router-controller: "swagger_server.controllers.catalog_service_controller"
    post:
      tags:
      - "CatalogService"
      operationId: "upload_multiple_assets"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/apiCatalogUpload"
      responses:
        "201":
          description: "All objects were created successfully."
          schema:
            $ref: "#/definitions/apiCatalogUploadResponse"
        "207":
          description: "Some objects were created successfully, some errors occurred."
          schema:
            $ref: "#/definitions/apiCatalogUploadResponse"
        default:
          description: "Something went wrong."
          schema:
            $ref: "#/definitions/apiStatus"
      x-swagger-router-controller: "swagger_server.controllers.catalog_service_controller"
  /components:
    get:
      tags:
      - "ComponentService"
      operationId: "list_components"
      parameters:
      - name: "page_token"
        in: "query"
        required: false
        type: "string"
      - name: "page_size"
        in: "query"
        required: false
        type: "integer"
        format: "int32"
      - name: "sort_by"
        in: "query"
        description: "Can be format of \"field_name\", \"field_name asc\" or \"field_name\
          \ desc\"\nAscending by default."
        required: false
        type: "string"
        x-nullable: true
      - name: "filter"
        in: "query"
        description: "A string-serialized JSON dictionary with key-value pairs that\
          \ correspond to the ApiComponent's attribute names and their respective\
          \ values to be filtered for."
        required: false
        type: "string"
        x-nullable: true
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiListComponentsResponse"
        default:
          description: ""
          schema:
            $ref: "#/definitions/apiStatus"
      x-swagger-router-controller: "swagger_server.controllers.component_service_controller"
    post:
      tags:
      - "ComponentService"
      operationId: "create_component"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/apiComponent"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiComponent"
        default:
          description: ""
          schema:
            $ref: "#/definitions/apiStatus"
      x-swagger-router-controller: "swagger_server.controllers.component_service_controller"
  /components/{id}:
    get:
      tags:
      - "ComponentService"
      operationId: "get_component"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiComponent"
        default:
          description: ""
          schema:
            $ref: "#/definitions/apiStatus"
      x-swagger-router-controller: "swagger_server.controllers.component_service_controller"
    delete:
      tags:
      - "ComponentService"
      operationId: "delete_component"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        "204":
          description: "Deletion successful."
        default:
          description: ""
          schema:
            $ref: "#/definitions/apiStatus"
      x-swagger-router-controller: "swagger_server.controllers.component_service_controller"
  /components/{id}/download:
    get:
      tags:
      - "ComponentService"
      summary: "Returns the component artifacts compressed into a .tgz (.tar.gz) file."
      operationId: "download_component_files"
      produces:
      - "application/gzip"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      - name: "include_generated_code"
        in: "query"
        description: "Include generated run script in download"
        required: false
        type: "boolean"
        default: false
        allowEmptyValue: true
      responses:
        "200":
          description: "A TGZ file containing the component artifacts."
          schema:
            type: "file"
      x-swagger-router-controller: "swagger_server.controllers.component_service_controller"
  /components/{id}/generate_code:
    get:
      tags:
      - "ComponentService"
      description: "Generate sample code to use component in a pipeline"
      operationId: "generate_component_code"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiGenerateCodeResponse"
        default:
          description: ""
          schema:
            $ref: "#/definitions/apiStatus"
      x-swagger-router-controller: "swagger_server.controllers.component_service_controller"
  /components/{id}/run:
    post:
      tags:
      - "ComponentService"
      operationId: "run_component"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "parameters"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/apiParameter"
      - name: "run_name"
        in: "query"
        description: "name to identify the run on the Kubeflow Pipelines UI, defaults\
          \ to component name"
        required: false
        type: "string"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiRunCodeResponse"
        default:
          description: ""
          schema:
            $ref: "#/definitions/apiStatus"
      x-swagger-router-controller: "swagger_server.controllers.component_service_controller"
  /components/{id}/templates:
    get:
      tags:
      - "ComponentService"
      operationId: "get_component_template"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiGetTemplateResponse"
        default:
          description: ""
          schema:
            $ref: "#/definitions/apiStatus"
      x-swagger-router-controller: "swagger_server.controllers.component_service_controller"
  /components/upload:
    post:
      tags:
      - "ComponentService"
      operationId: "upload_component"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "uploadfile"
        in: "formData"
        description: "The component YAML file to upload. Can be a GZip-compressed\
          \ TAR file (.tgz, .tar.gz) or a YAML file (.yaml, .yml). Maximum size is\
          \ 32MB."
        required: true
        type: "file"
      - name: "name"
        in: "query"
        required: false
        type: "string"
      responses:
        "201":
          description: "Component was created successfully"
          schema:
            $ref: "#/definitions/apiComponent"
        default:
          description: "Something went wrong"
          schema:
            $ref: "#/definitions/apiStatus"
      x-swagger-router-controller: "swagger_server.controllers.component_service_controller"
  /components/upload_from_url:
    post:
      tags:
      - "ComponentService"
      operationId: "upload_component_from_url"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "url"
        in: "formData"
        description: "URL pointing to the component YAML file."
        required: true
        type: "string"
      - name: "name"
        in: "query"
        description: "Optional, the name of the component to be created overriding\
          \ the name in the YAML file."
        required: false
        type: "string"
      - name: "access_token"
        in: "formData"
        description: "Optional, the Bearer token to access the 'url'."
        required: false
        type: "string"
      responses:
        "201":
          description: "Component was created successfully."
          schema:
            $ref: "#/definitions/apiComponent"
        default:
          description: "Something went wrong."
          schema:
            $ref: "#/definitions/apiStatus"
      x-swagger-router-controller: "swagger_server.controllers.component_service_controller"
  /components/{id}/upload:
    post:
      tags:
      - "ComponentService"
      operationId: "upload_component_file"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The id of the component."
        required: true
        type: "string"
      - name: "uploadfile"
        in: "formData"
        description: "The file to upload, overwriting existing. Can be a GZip-compressed\
          \ TAR file (.tgz), a YAML file (.yaml), Python script (.py), or Markdown\
          \ file (.md)"
        required: true
        type: "file"
      responses:
        "204":
          description: ""
          schema:
            $ref: "#/definitions/apiComponent"
        default:
          description: ""
          schema:
            $ref: "#/definitions/apiStatus"
      x-swagger-router-controller: "swagger_server.controllers.component_service_controller"
  /components/featured:
    post:
      tags:
      - "ComponentService"
      operationId: "set_featured_components"
      parameters:
      - in: "body"
        name: "component_ids"
        description: "Array of component IDs to be featured."
        required: true
        schema:
          type: "array"
          items:
            type: "string"
      responses:
        "200":
          description: "Success"
        default:
          description: "Something went wrong"
          schema:
            $ref: "#/definitions/apiStatus"
      x-swagger-router-controller: "swagger_server.controllers.component_service_controller"
  /components/publish_approved:
    post:
      tags:
      - "ComponentService"
      operationId: "approve_components_for_publishing"
      parameters:
      - in: "body"
        name: "component_ids"
        description: "Array of component IDs to be approved for publishing."
        required: true
        schema:
          type: "array"
          items:
            type: "string"
      responses:
        "200":
          description: "Success"
        default:
          description: "Something went wrong"
          schema:
            $ref: "#/definitions/apiStatus"
      x-swagger-router-controller: "swagger_server.controllers.component_service_controller"
  /credentials:
    get:
      tags:
      - "CredentialService"
      operationId: "list_credentials"
      parameters:
      - name: "page_token"
        in: "query"
        required: false
        type: "string"
      - name: "page_size"
        in: "query"
        required: false
        type: "integer"
        format: "int32"
      - name: "sort_by"
        in: "query"
        description: "Can be format of \"field_name\", \"field_name asc\" or \"field_name\
          \ desc\"\nAscending by default."
        required: false
        type: "string"
        x-nullable: true
      - name: "filter"
        in: "query"
        description: "A string-serialized JSON dictionary with key-value pairs that\
          \ correspond to the Credential's attribute names and their respective values\
          \ to be filtered for."
        required: false
        type: "string"
        x-nullable: true
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiListCredentialsResponse"
        default:
          description: ""
          schema:
            $ref: "#/definitions/apiStatus"
      x-swagger-router-controller: "swagger_server.controllers.credential_service_controller"
    post:
      tags:
      - "CredentialService"
      description: "Creates a credential associated with a pipeline."
      operationId: "create_credential"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/apiCredential"
      responses:
        "201":
          description: "The credential was created."
          schema:
            $ref: "#/definitions/apiCredential"
        default:
          description: ""
          schema:
            $ref: "#/definitions/apiStatus"
      x-swagger-router-controller: "swagger_server.controllers.credential_service_controller"
  /credentials/{id}:
    get:
      tags:
      - "CredentialService"
      operationId: "get_credential"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiCredential"
        default:
          description: ""
          schema:
            $ref: "#/definitions/apiStatus"
      x-swagger-router-controller: "swagger_server.controllers.credential_service_controller"
    delete:
      tags:
      - "CredentialService"
      operationId: "delete_credential"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        "204":
          description: "Deletion successful."
        default:
          description: ""
          schema:
            $ref: "#/definitions/apiStatus"
      x-swagger-router-controller: "swagger_server.controllers.credential_service_controller"
  /datasets:
    get:
      tags:
      - "DatasetService"
      operationId: "list_datasets"
      parameters:
      - name: "page_token"
        in: "query"
        required: false
        type: "string"
      - name: "page_size"
        in: "query"
        required: false
        type: "integer"
        format: "int32"
      - name: "sort_by"
        in: "query"
        description: "Can be format of 'field_name', 'field_name asc' or 'field_name\
          \ desc'. Ascending by default."
        required: false
        type: "string"
        x-nullable: true
      - name: "filter"
        in: "query"
        description: "A string-serialized JSON dictionary containing key-value pairs\
          \ with name of the object property to apply filter on and the value of the\
          \ respective property."
        required: false
        type: "string"
        x-nullable: true
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiListDatasetsResponse"
        default:
          description: ""
          schema:
            $ref: "#/definitions/apiStatus"
      x-swagger-router-controller: "swagger_server.controllers.dataset_service_controller"
    post:
      tags:
      - "DatasetService"
      operationId: "create_dataset"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/apiDataset"
      responses:
        "201":
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiDataset"
        default:
          description: ""
          schema:
            $ref: "#/definitions/apiStatus"
      x-swagger-router-controller: "swagger_server.controllers.dataset_service_controller"
  /datasets/{id}:
    get:
      tags:
      - "DatasetService"
      operationId: "get_dataset"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiDataset"
        default:
          description: ""
          schema:
            $ref: "#/definitions/apiStatus"
      x-swagger-router-controller: "swagger_server.controllers.dataset_service_controller"
    delete:
      tags:
      - "DatasetService"
      operationId: "delete_dataset"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        "204":
          description: "Deletion successful."
        default:
          description: ""
          schema:
            $ref: "#/definitions/apiStatus"
      x-swagger-router-controller: "swagger_server.controllers.dataset_service_controller"
  /datasets/{id}/download:
    get:
      tags:
      - "DatasetService"
      summary: "Returns the dataset artifacts compressed into a .tgz (.tar.gz) file."
      operationId: "download_dataset_files"
      produces:
      - "application/gzip"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      - name: "include_generated_code"
        in: "query"
        description: "Include generated run script in download"
        required: false
        type: "boolean"
        default: false
        allowEmptyValue: true
      responses:
        "200":
          description: "A TGZ file containing the dataset artifacts."
          schema:
            type: "file"
      x-swagger-router-controller: "swagger_server.controllers.dataset_service_controller"
  /datasets/{id}/generate_code:
    get:
      tags:
      - "DatasetService"
      description: "Generate sample code to use dataset in a pipeline"
      operationId: "generate_dataset_code"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiGenerateCodeResponse"
        default:
          description: ""
          schema:
            $ref: "#/definitions/apiStatus"
      x-swagger-router-controller: "swagger_server.controllers.dataset_service_controller"
  /datasets/{id}/run:
    post:
      tags:
      - "DatasetService"
      operationId: "run_dataset"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "parameters"
        required: false
        schema:
          type: "array"
          items:
            $ref: "#/definitions/apiParameter"
      - name: "run_name"
        in: "query"
        description: "name to identify the run on the Kubeflow Pipelines UI, defaults\
          \ to component name"
        required: false
        type: "string"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiRunCodeResponse"
        default:
          description: ""
          schema:
            $ref: "#/definitions/apiStatus"
      x-swagger-router-controller: "swagger_server.controllers.dataset_service_controller"
  /datasets/{id}/templates:
    get:
      tags:
      - "DatasetService"
      operationId: "get_dataset_template"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiGetTemplateResponse"
        default:
          description: ""
          schema:
            $ref: "#/definitions/apiStatus"
      x-swagger-router-controller: "swagger_server.controllers.dataset_service_controller"
  /datasets/upload:
    post:
      tags:
      - "DatasetService"
      operationId: "upload_dataset"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "uploadfile"
        in: "formData"
        description: "The dataset YAML file to upload. Can be a GZip-compressed TAR\
          \ file (.tgz, .tar.gz) or a YAML file (.yaml, .yml). Maximum size is 32MB."
        required: true
        type: "file"
      - name: "name"
        in: "query"
        required: false
        type: "string"
      responses:
        "201":
          description: ""
          schema:
            $ref: "#/definitions/apiDataset"
        default:
          description: ""
          schema:
            $ref: "#/definitions/apiStatus"
      x-swagger-router-controller: "swagger_server.controllers.dataset_service_controller"
  /datasets/upload_from_url:
    post:
      tags:
      - "DatasetService"
      operationId: "upload_dataset_from_url"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "url"
        in: "formData"
        description: "URL pointing to the dataset YAML file."
        required: true
        type: "string"
      - name: "name"
        in: "query"
        description: "Optional, the name of the dataset to be created overriding the\
          \ name in the YAML file."
        required: false
        type: "string"
      - name: "access_token"
        in: "formData"
        description: "Optional, the Bearer token to access the 'url'."
        required: false
        type: "string"
      responses:
        "201":
          description: "Dataset was created successfully."
          schema:
            $ref: "#/definitions/apiDataset"
        default:
          description: "Something went wrong."
          schema:
            $ref: "#/definitions/apiStatus"
      x-swagger-router-controller: "swagger_server.controllers.dataset_service_controller"
  /datasets/{id}/upload:
    post:
      tags:
      - "DatasetService"
      operationId: "upload_dataset_file"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The id of the dataset."
        required: true
        type: "string"
      - name: "uploadfile"
        in: "formData"
        description: "The file to upload, overwriting existing. Can be a GZip-compressed\
          \ TAR file (.tgz), a YAML file (.yaml), Python script (.py), or Markdown\
          \ file (.md)"
        required: true
        type: "file"
      responses:
        "204":
          description: ""
          schema:
            $ref: "#/definitions/apiDataset"
        default:
          description: ""
          schema:
            $ref: "#/definitions/apiStatus"
      x-swagger-router-controller: "swagger_server.controllers.dataset_service_controller"
  /datasets/featured:
    post:
      tags:
      - "DatasetService"
      operationId: "set_featured_datasets"
      parameters:
      - in: "body"
        name: "dataset_ids"
        description: "Array of dataset IDs to be featured."
        required: true
        schema:
          type: "array"
          items:
            type: "string"
      responses:
        "200":
          description: "Success"
        default:
          description: "Something went wrong"
          schema:
            $ref: "#/definitions/apiStatus"
      x-swagger-router-controller: "swagger_server.controllers.dataset_service_controller"
  /datasets/publish_approved:
    post:
      tags:
      - "DatasetService"
      operationId: "approve_datasets_for_publishing"
      parameters:
      - in: "body"
        name: "dataset_ids"
        description: "Array of dataset IDs to be approved for publishing."
        required: true
        schema:
          type: "array"
          items:
            type: "string"
      responses:
        "200":
          description: "Success"
        default:
          description: "Something went wrong"
          schema:
            $ref: "#/definitions/apiStatus"
      x-swagger-router-controller: "swagger_server.controllers.dataset_service_controller"
  /inferenceservices:
    get:
      tags:
      - "InferenceService"
      operationId: "list_inferenceservices"
      parameters:
      - name: "page_token"
        in: "query"
        required: false
        type: "string"
      - name: "page_size"
        in: "query"
        required: false
        type: "integer"
        format: "int32"
      - name: "sort_by"
        in: "query"
        description: "Can be format of \"field_name\", \"field_name asc\" or \"field_name\
          \ desc\"\nAscending by default."
        required: false
        type: "string"
        x-nullable: true
      - name: "filter"
        in: "query"
        description: "A string-serialized JSON dictionary with key-value pairs that\
          \ correspond to the InferenceService's attribute names and their respective\
          \ values to be filtered for."
        required: false
        type: "string"
        x-nullable: true
      - name: "namespace"
        in: "query"
        required: false
        type: "string"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiListInferenceservicesResponse"
        default:
          description: ""
          schema:
            $ref: "#/definitions/apiStatus"
      x-swagger-router-controller: "swagger_server.controllers.inference_service_controller"
    post:
      tags:
      - "InferenceService"
      operationId: "create_service"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/apiInferenceservice"
      - name: "namespace"
        in: "query"
        required: false
        type: "string"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiInferenceservice"
        default:
          description: ""
          schema:
            $ref: "#/definitions/apiStatus"
      x-swagger-router-controller: "swagger_server.controllers.inference_service_controller"
  /inferenceservices/{id}:
    get:
      tags:
      - "InferenceService"
      operationId: "get_inferenceservices"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      - name: "namespace"
        in: "query"
        required: false
        type: "string"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiInferenceservice"
        default:
          description: ""
          schema:
            $ref: "#/definitions/apiStatus"
      x-swagger-router-controller: "swagger_server.controllers.inference_service_controller"
  /inferenceservices/upload:
    post:
      tags:
      - "InferenceService"
      operationId: "upload_service"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "uploadfile"
        in: "formData"
        description: "The inference service metadata to upload. Maximum size of 32MB\
          \ is supported."
        required: true
        type: "file"
      - name: "name"
        in: "query"
        required: false
        type: "string"
      - name: "namespace"
        in: "query"
        required: false
        type: "string"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/apiInferenceservice"
        default:
          description: ""
          schema:
            $ref: "#/definitions/apiStatus"
      x-swagger-router-controller: "swagger_server.controllers.inference_service_controller"
  /models:
    get:
      tags:
      - "ModelService"
      operationId: "list_models"
      parameters:
      - name: "page_token"
        in: "query"
        required: false
        type: "string"
      - name: "page_size"
        in: "query"
        required: false
        type: "integer"
        format: "int32"
      - name: "sort_by"
        in: "query"
        description: "Can be format of \"field_name\", \"field_name asc\" or \"field_name\
          \ desc\"\nAscending by default."
        required: false
        type: "string"
        x-nullable: true
      - name: "filter"
        in: "query"
        description: "A string-serialized JSON dictionary with key-value pairs that\
          \ correspond to the Model's attribute names and their respective values\
          \ to be filtered for."
        required: false
        type: "string"
        x-nullable: true
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiListModelsResponse"
        default:
          description: ""
          schema:
            $ref: "#/definitions/apiStatus"
      x-swagger-router-controller: "swagger_server.controllers.model_service_controller"
    post:
      tags:
      - "ModelService"
      operationId: "create_model"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/apiModel"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiModel"
        default:
          description: ""
          schema:
            $ref: "#/definitions/apiStatus"
      x-swagger-router-controller: "swagger_server.controllers.model_service_controller"
  /models/{id}:
    get:
      tags:
      - "ModelService"
      operationId: "get_model"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiModel"
        default:
          description: ""
          schema:
            $ref: "#/definitions/apiStatus"
      x-swagger-router-controller: "swagger_server.controllers.model_service_controller"
    delete:
      tags:
      - "ModelService"
      operationId: "delete_model"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        "204":
          description: "Deletion successful."
        default:
          description: ""
          schema:
            $ref: "#/definitions/apiStatus"
      x-swagger-router-controller: "swagger_server.controllers.model_service_controller"
  /models/{id}/download:
    get:
      tags:
      - "ModelService"
      summary: "Returns the model artifacts compressed into a .tgz (.tar.gz) file."
      operationId: "download_model_files"
      produces:
      - "application/gzip"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      - name: "include_generated_code"
        in: "query"
        description: "Include generated run scripts in download"
        required: false
        type: "boolean"
        default: false
        allowEmptyValue: true
      responses:
        "200":
          description: "A TGZ file containing the model artifacts."
          schema:
            type: "file"
      x-swagger-router-controller: "swagger_server.controllers.model_service_controller"
  /models/{id}/generate_code:
    get:
      tags:
      - "ModelService"
      operationId: "generate_model_code"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiGenerateModelCodeResponse"
        default:
          description: ""
          schema:
            $ref: "#/definitions/apiStatus"
      x-swagger-router-controller: "swagger_server.controllers.model_service_controller"
  /models/{id}/run:
    post:
      tags:
      - "ModelService"
      operationId: "run_model"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      - name: "pipeline_stage"
        in: "query"
        description: "pipeline stage, either 'train' or 'serve'"
        required: true
        type: "string"
        enum:
        - "train"
        - "serve"
      - name: "execution_platform"
        in: "query"
        description: "execution platform, i.e. 'kubernetes', 'knative'"
        required: true
        type: "string"
      - name: "run_name"
        in: "query"
        description: "name to identify the run on the Kubeflow Pipelines UI, defaults\
          \ to model identifier"
        required: false
        type: "string"
      - in: "body"
        name: "parameters"
        description: "optional run parameters, must include 'github_url' and 'github_token'\
          \ if credentials are required"
        required: false
        schema:
          $ref: "#/definitions/dictionary"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiRunCodeResponse"
        default:
          description: ""
          schema:
            $ref: "#/definitions/apiStatus"
      x-swagger-router-controller: "swagger_server.controllers.model_service_controller"
  /models/{id}/templates:
    get:
      tags:
      - "ModelService"
      operationId: "get_model_template"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiGetTemplateResponse"
        default:
          description: ""
          schema:
            $ref: "#/definitions/apiStatus"
      x-swagger-router-controller: "swagger_server.controllers.model_service_controller"
  /models/upload:
    post:
      tags:
      - "ModelService"
      operationId: "upload_model"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "uploadfile"
        in: "formData"
        description: "The model YAML file to upload. Can be a GZip-compressed TAR\
          \ file (.tgz, .tar.gz) or a YAML file (.yaml, .yml). Maximum size is 32MB."
        required: true
        type: "file"
      - name: "name"
        in: "query"
        required: false
        type: "string"
      responses:
        "201":
          description: ""
          schema:
            $ref: "#/definitions/apiModel"
        default:
          description: ""
          schema:
            $ref: "#/definitions/apiStatus"
      x-swagger-router-controller: "swagger_server.controllers.model_service_controller"
  /models/upload_from_url:
    post:
      tags:
      - "ModelService"
      operationId: "upload_model_from_url"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "url"
        in: "formData"
        description: "URL pointing to the model YAML file."
        required: true
        type: "string"
      - name: "name"
        in: "query"
        description: "Optional, the name of the model to be created overriding the\
          \ name in the YAML file."
        required: false
        type: "string"
      - name: "access_token"
        in: "formData"
        description: "Optional, the Bearer token to access the 'url'."
        required: false
        type: "string"
      responses:
        "201":
          description: "Model was created successfully."
          schema:
            $ref: "#/definitions/apiModel"
        default:
          description: "Something went wrong."
          schema:
            $ref: "#/definitions/apiStatus"
      x-swagger-router-controller: "swagger_server.controllers.model_service_controller"
  /models/{id}/upload:
    post:
      tags:
      - "ModelService"
      operationId: "upload_model_file"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The model identifier."
        required: true
        type: "string"
      - name: "uploadfile"
        in: "formData"
        description: "The file to upload, overwriting existing. Can be a GZip-compressed\
          \ TAR file (.tgz), a YAML file (.yaml), Python script (.py), or Markdown\
          \ file (.md)"
        required: true
        type: "file"
      responses:
        "204":
          description: ""
          schema:
            $ref: "#/definitions/apiModel"
        default:
          description: ""
          schema:
            $ref: "#/definitions/apiStatus"
      x-swagger-router-controller: "swagger_server.controllers.model_service_controller"
  /models/featured:
    post:
      tags:
      - "ModelService"
      operationId: "set_featured_models"
      parameters:
      - in: "body"
        name: "model_ids"
        description: "Array of model IDs to be featured."
        required: true
        schema:
          type: "array"
          items:
            type: "string"
      responses:
        "200":
          description: "Success"
        default:
          description: "Something went wrong"
          schema:
            $ref: "#/definitions/apiStatus"
      x-swagger-router-controller: "swagger_server.controllers.model_service_controller"
  /models/publish_approved:
    post:
      tags:
      - "ModelService"
      operationId: "approve_models_for_publishing"
      parameters:
      - in: "body"
        name: "model_ids"
        description: "Array of model IDs to be approved for publishing."
        required: true
        schema:
          type: "array"
          items:
            type: "string"
      responses:
        "200":
          description: "Success"
        default:
          description: "Something went wrong"
          schema:
            $ref: "#/definitions/apiStatus"
      x-swagger-router-controller: "swagger_server.controllers.model_service_controller"
  /notebooks:
    get:
      tags:
      - "NotebookService"
      operationId: "list_notebooks"
      parameters:
      - name: "page_token"
        in: "query"
        required: false
        type: "string"
      - name: "page_size"
        in: "query"
        required: false
        type: "integer"
        format: "int32"
      - name: "sort_by"
        in: "query"
        description: "Can be format of \"field_name\", \"field_name asc\" or \"field_name\
          \ desc\"\nAscending by default."
        required: false
        type: "string"
        x-nullable: true
      - name: "filter"
        in: "query"
        description: "A string-serialized JSON dictionary with key-value pairs that\
          \ correspond to the Notebook's attribute names and their respective values\
          \ to be filtered for."
        required: false
        type: "string"
        x-nullable: true
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiListNotebooksResponse"
        default:
          description: ""
          schema:
            $ref: "#/definitions/apiStatus"
      x-swagger-router-controller: "swagger_server.controllers.notebook_service_controller"
    post:
      tags:
      - "NotebookService"
      operationId: "create_notebook"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/apiNotebook"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiNotebook"
        default:
          description: ""
          schema:
            $ref: "#/definitions/apiStatus"
      x-swagger-router-controller: "swagger_server.controllers.notebook_service_controller"
  /notebooks/{id}:
    get:
      tags:
      - "NotebookService"
      operationId: "get_notebook"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiNotebook"
        default:
          description: ""
          schema:
            $ref: "#/definitions/apiStatus"
      x-swagger-router-controller: "swagger_server.controllers.notebook_service_controller"
    delete:
      tags:
      - "NotebookService"
      operationId: "delete_notebook"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        "204":
          description: "Deletion successful."
        default:
          description: ""
          schema:
            $ref: "#/definitions/apiStatus"
      x-swagger-router-controller: "swagger_server.controllers.notebook_service_controller"
  /notebooks/{id}/download:
    get:
      tags:
      - "NotebookService"
      summary: "Returns the notebook artifacts compressed into a .tgz (.tar.gz) file."
      operationId: "download_notebook_files"
      produces:
      - "application/gzip"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      - name: "include_generated_code"
        in: "query"
        description: "Include generated run script in download"
        required: false
        type: "boolean"
        default: false
        allowEmptyValue: true
      responses:
        "200":
          description: "A TGZ file containing the notebook artifacts."
          schema:
            type: "file"
      x-swagger-router-controller: "swagger_server.controllers.notebook_service_controller"
  /notebooks/{id}/generate_code:
    get:
      tags:
      - "NotebookService"
      description: "Generate sample code to use notebook in a pipeline"
      operationId: "generate_notebook_code"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiGenerateCodeResponse"
        default:
          description: ""
          schema:
            $ref: "#/definitions/apiStatus"
      x-swagger-router-controller: "swagger_server.controllers.notebook_service_controller"
  /notebooks/{id}/run:
    post:
      tags:
      - "NotebookService"
      operationId: "run_notebook"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      - name: "run_name"
        in: "query"
        description: "name to identify the run on the Kubeflow Pipelines UI, defaults\
          \ to notebook name"
        required: false
        type: "string"
      - in: "body"
        name: "parameters"
        description: "optional run parameters, may be required based on pipeline definition"
        required: false
        schema:
          $ref: "#/definitions/dictionary"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiRunCodeResponse"
        default:
          description: ""
          schema:
            $ref: "#/definitions/apiStatus"
      x-swagger-router-controller: "swagger_server.controllers.notebook_service_controller"
  /notebooks/{id}/templates:
    get:
      tags:
      - "NotebookService"
      operationId: "get_notebook_template"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiGetTemplateResponse"
        default:
          description: ""
          schema:
            $ref: "#/definitions/apiStatus"
      x-swagger-router-controller: "swagger_server.controllers.notebook_service_controller"
  /notebooks/upload:
    post:
      tags:
      - "NotebookService"
      operationId: "upload_notebook"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "uploadfile"
        in: "formData"
        description: "The notebook metadata YAML file to upload. Can be a GZip-compressed\
          \ TAR file (.tgz, .tar.gz) or a YAML file (.yaml, .yml). Maximum size is\
          \ 32MB."
        required: true
        type: "file"
      - name: "name"
        in: "query"
        required: false
        type: "string"
      - name: "enterprise_github_token"
        in: "formData"
        description: "Optional GitHub API token providing read-access to notebooks\
          \ stored on Enterprise GitHub accounts."
        required: false
        type: "string"
      responses:
        "201":
          description: ""
          schema:
            $ref: "#/definitions/apiNotebook"
        default:
          description: ""
          schema:
            $ref: "#/definitions/apiStatus"
      x-swagger-router-controller: "swagger_server.controllers.notebook_service_controller"
  /notebooks/upload_from_url:
    post:
      tags:
      - "NotebookService"
      operationId: "upload_notebook_from_url"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "url"
        in: "formData"
        description: "URL pointing to the notebook YAML file."
        required: true
        type: "string"
      - name: "name"
        in: "query"
        description: "Optional, the name of the notebook to be created overriding\
          \ the name in the YAML file."
        required: false
        type: "string"
      - name: "access_token"
        in: "formData"
        description: "Optional, the Bearer token to access the 'url'."
        required: false
        type: "string"
      responses:
        "201":
          description: "Notebook was created successfully."
          schema:
            $ref: "#/definitions/apiNotebook"
        default:
          description: "Something went wrong."
          schema:
            $ref: "#/definitions/apiStatus"
      x-swagger-router-controller: "swagger_server.controllers.notebook_service_controller"
  /notebooks/{id}/upload:
    post:
      tags:
      - "NotebookService"
      operationId: "upload_notebook_file"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The id of the notebook."
        required: true
        type: "string"
      - name: "uploadfile"
        in: "formData"
        description: "The file to upload, overwriting existing. Can be a GZip-compressed\
          \ TAR file (.tgz), a YAML file (.yaml), Python script (.py), or Markdown\
          \ file (.md)"
        required: true
        type: "file"
      responses:
        "204":
          description: ""
          schema:
            $ref: "#/definitions/apiNotebook"
        default:
          description: ""
          schema:
            $ref: "#/definitions/apiStatus"
      x-swagger-router-controller: "swagger_server.controllers.notebook_service_controller"
  /notebooks/featured:
    post:
      tags:
      - "NotebookService"
      operationId: "set_featured_notebooks"
      parameters:
      - in: "body"
        name: "notebook_ids"
        description: "Array of notebook IDs to be featured."
        required: true
        schema:
          type: "array"
          items:
            type: "string"
      responses:
        "200":
          description: "Success"
        default:
          description: "Something went wrong"
          schema:
            $ref: "#/definitions/apiStatus"
      x-swagger-router-controller: "swagger_server.controllers.notebook_service_controller"
  /notebooks/publish_approved:
    post:
      tags:
      - "NotebookService"
      operationId: "approve_notebooks_for_publishing"
      parameters:
      - in: "body"
        name: "notebook_ids"
        description: "Array of notebook IDs to be approved for publishing."
        required: true
        schema:
          type: "array"
          items:
            type: "string"
      responses:
        "200":
          description: "Success"
        default:
          description: "Something went wrong"
          schema:
            $ref: "#/definitions/apiStatus"
      x-swagger-router-controller: "swagger_server.controllers.notebook_service_controller"
  /pipelines:
    get:
      tags:
      - "PipelineService"
      operationId: "list_pipelines"
      parameters:
      - name: "page_token"
        in: "query"
        required: false
        type: "string"
      - name: "page_size"
        in: "query"
        required: false
        type: "integer"
        format: "int32"
      - name: "sort_by"
        in: "query"
        description: "Can be format of \"field_name\", \"field_name asc\" or \"field_name\
          \ desc\"\nAscending by default."
        required: false
        type: "string"
      - name: "filter"
        in: "query"
        description: "A string-serialized JSON dictionary with key-value pairs that\
          \ correspond to the Pipeline's attribute names and their respective values\
          \ to be filtered for."
        required: false
        type: "string"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiListPipelinesResponse"
        default:
          description: ""
          schema:
            $ref: "#/definitions/apiStatus"
      x-swagger-router-controller: "swagger_server.controllers.pipeline_service_controller"
    post:
      tags:
      - "PipelineService"
      operationId: "create_pipeline"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/apiPipeline"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiPipeline"
        default:
          description: ""
          schema:
            $ref: "#/definitions/apiStatus"
      x-swagger-router-controller: "swagger_server.controllers.pipeline_service_controller"
  /pipelines/{id}:
    get:
      tags:
      - "PipelineService"
      operationId: "get_pipeline"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiPipelineExtended"
        default:
          description: ""
          schema:
            $ref: "#/definitions/apiStatus"
      x-swagger-router-controller: "swagger_server.controllers.pipeline_service_controller"
    delete:
      tags:
      - "PipelineService"
      operationId: "delete_pipeline"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        "204":
          description: "Deletion successful."
        default:
          description: ""
          schema:
            $ref: "#/definitions/apiStatus"
      x-swagger-router-controller: "swagger_server.controllers.pipeline_service_controller"
  /pipelines/{id}/download:
    get:
      tags:
      - "PipelineService"
      summary: "Returns the pipeline YAML compressed into a .tgz (.tar.gz) file."
      operationId: "download_pipeline_files"
      produces:
      - "application/gzip"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "A TGZ file containing the component artifacts."
          schema:
            type: "file"
      x-swagger-router-controller: "swagger_server.controllers.pipeline_service_controller"
  /pipelines/{id}/run:
    post:
      tags:
      - "PipelineService"
      operationId: "run_pipeline"
      consumes:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      - name: "run_name"
        in: "query"
        description: "name to identify the run on the Kubeflow Pipelines UI, defaults\
          \ to pipeline name"
        required: false
        type: "string"
      - in: "body"
        name: "parameters"
        description: "optional run parameters, may be required based on pipeline definition"
        required: false
        schema:
          $ref: "#/definitions/dictionary"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiRunCodeResponse"
        default:
          description: ""
          schema:
            $ref: "#/definitions/apiStatus"
      x-swagger-router-controller: "swagger_server.controllers.pipeline_service_controller"
  /pipelines/{id}/templates:
    get:
      tags:
      - "PipelineService"
      operationId: "get_template"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiGetTemplateResponse"
        default:
          description: ""
          schema:
            $ref: "#/definitions/apiStatus"
      x-swagger-router-controller: "swagger_server.controllers.pipeline_service_controller"
  /pipelines/upload:
    post:
      tags:
      - "PipelineService"
      operationId: "upload_pipeline"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "uploadfile"
        in: "formData"
        description: "The pipeline YAML file to upload. Can be a GZip-compressed TAR\
          \ file (.tgz, .tar.gz) or a YAML file (.yaml, .yml). Maximum size is 32MB."
        required: true
        type: "file"
      - name: "name"
        in: "query"
        description: "A name for this pipeline, optional"
        required: false
        type: "string"
      - name: "description"
        in: "query"
        description: "A description for this pipeline, optional"
        required: false
        type: "string"
      - name: "annotations"
        in: "formData"
        description: "A string representation of a JSON dictionary of annotations\
          \ describing this pipeline, optional. Example: {\"platform\": \"Kubeflow\"\
          , \"license\": \"Opensource\"}"
        required: false
        type: "string"
      responses:
        "201":
          description: ""
          schema:
            $ref: "#/definitions/apiPipelineExtended"
        default:
          description: ""
          schema:
            $ref: "#/definitions/apiStatus"
      x-swagger-router-controller: "swagger_server.controllers.pipeline_service_controller"
  /pipelines/upload_from_url:
    post:
      tags:
      - "PipelineService"
      operationId: "upload_pipeline_from_url"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "url"
        in: "formData"
        description: "URL pointing to the pipeline YAML file."
        required: true
        type: "string"
      - name: "name"
        in: "query"
        description: "Optional, the name of the pipeline to be created overriding\
          \ the name in the YAML file."
        required: false
        type: "string"
      - name: "access_token"
        in: "formData"
        description: "Optional, the Bearer token to access the 'url'."
        required: false
        type: "string"
      responses:
        "201":
          description: "Pipeline was created successfully."
          schema:
            $ref: "#/definitions/apiPipeline"
        default:
          description: "Something went wrong."
          schema:
            $ref: "#/definitions/apiStatus"
      x-swagger-router-controller: "swagger_server.controllers.pipeline_service_controller"
  /pipelines/featured:
    post:
      tags:
      - "PipelineService"
      operationId: "set_featured_pipelines"
      parameters:
      - in: "body"
        name: "pipeline_ids"
        description: "Array of pipeline IDs to be featured."
        required: true
        schema:
          type: "array"
          items:
            type: "string"
      responses:
        "200":
          description: "Success"
        default:
          description: "Something went wrong"
          schema:
            $ref: "#/definitions/apiStatus"
      x-swagger-router-controller: "swagger_server.controllers.pipeline_service_controller"
  /pipelines/publish_approved:
    post:
      tags:
      - "PipelineService"
      operationId: "approve_pipelines_for_publishing"
      parameters:
      - in: "body"
        name: "pipeline_ids"
        description: "Array of pipeline IDs to be approved for publishing."
        required: true
        schema:
          type: "array"
          items:
            type: "string"
      responses:
        "200":
          description: "Success"
        default:
          description: "Something went wrong"
          schema:
            $ref: "#/definitions/apiStatus"
      x-swagger-router-controller: "swagger_server.controllers.pipeline_service_controller"
  /pipelines/run_custom_pipeline:
    post:
      tags:
      - "PipelineService"
      description: "Run a complex pipeline defined by a directed acyclic graph (DAG)"
      operationId: "run_custom_pipeline"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "run_custom_pipeline_payload"
        description: "A custom pipeline defined by a directed acyclic graph (DAG)\
          \ and input parameters"
        required: true
        schema:
          $ref: "#/definitions/apiPipelineCustomRunPayload"
      - name: "run_name"
        in: "query"
        description: "Name to identify the run on the Kubeflow Pipelines UI"
        required: false
        type: "string"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiRunCodeResponse"
        default:
          description: ""
          schema:
            $ref: "#/definitions/apiStatus"
      x-swagger-router-controller: "swagger_server.controllers.pipeline_service_controller"
definitions:
  apiAccessToken:
    type: "object"
    required:
    - "api_token"
    - "url_host"
    properties:
      api_token:
        type: "string"
        description: "A read-only API access token."
      url_host:
        type: "string"
        description: "The API server host that this API token applies to."
    example:
      api_token: "T0K3N123"
      url_host: "github.ibm.com"
  apiAsset:
    type: "object"
    required:
    - "description"
    - "name"
    properties:
      id:
        type: "string"
      created_at:
        type: "string"
        format: "date-time"
      name:
        type: "string"
      description:
        type: "string"
      featured:
        type: "boolean"
      publish_approved:
        type: "boolean"
      related_assets:
        type: "array"
        items:
          type: "string"
      filter_categories:
        type: "object"
        additionalProperties:
          type: "string"
    description: "Abstract asset with properties shared across all MLX asset types (except pipelines)."
    example:
      id: "05au-84nr-1tey-0qwr"
      created_at: "2019-01-23T04:56:07.000+00:00"
      name: "Image Recognition Model"
      description: "A machine learning model to identify objects in images"
      filter_categories:
        domain: image-recognition
        platform:
          - kubernetes
          - kfserving
        language: python
  apiCatalogUpload:
    type: "object"
    properties:
      api_access_tokens:
        type: "array"
        description: "A mapping of read-only API access tokens to a partial URL."
        items:
          $ref: "#/definitions/apiAccessToken"
      components:
        type: "array"
        items:
          $ref: "#/definitions/apiCatalogUploadItem"
      datasets:
        type: "array"
        items:
          $ref: "#/definitions/apiCatalogUploadItem"
      models:
        type: "array"
        items:
          $ref: "#/definitions/apiCatalogUploadItem"
      notebooks:
        type: "array"
        items:
          $ref: "#/definitions/apiCatalogUploadItem"
      pipelines:
        type: "array"
        items:
          $ref: "#/definitions/apiCatalogUploadItem"
  apiCatalogUploadItem:
    type: "object"
    required:
    - "url"
    properties:
      name:
        type: "string"
      url:
        type: "string"
        description: "The URL to the YAML metadata file, i.e. on GitHub.com"
    example:
      name: "My awesome new asset"
      url: "https://github.com/org/repo/blob/main/assets/my/awesome/new/asset.yaml"
  apiCatalogUploadResponse:
    allOf:
    - $ref: "#/definitions/apiListCatalogItemsResponse"
    - $ref: "#/definitions/apiListCatalogUploadErrors"
    - properties:
        total_created:
          type: "integer"
          format: "int32"
    description: "A list of assets and/or errors created in response to a catalog\
      \ upload."
  apiListCatalogUploadErrors:
    type: "object"
    properties:
      errors:
        type: "array"
        items:
          $ref: "#/definitions/apiCatalogUploadError"
      total_errors:
        type: "integer"
        format: "int32"
  apiCatalogUploadError:
    allOf:
    - $ref: "#/definitions/apiCatalogUploadItem"
    - properties:
        error_message:
          type: "string"
        status_code:
          type: "integer"
          format: "int32"
    description: "A catalog upload error"
  apiComponent:
    allOf:
    - $ref: "#/definitions/apiAsset"
    - properties:
        metadata:
          $ref: "#/definitions/apiMetadata"
        parameters:
          type: "array"
          items:
            $ref: "#/definitions/apiParameter"
    description: "A Kubeflow Pipeline component."
    example:
      id: "id"
      created_at: "2019-01-23T04:56:07.000+00:00"
      name: "Deep Learning - Train Model"
      description: "description"
      metadata:
        labels:
          platform: "IBM Watson"
      parameters:
      - name: "model_filename"
        value: "model.py"
      - name: "data_filename"
        value: "data.csv"
  apiCredential:
    type: "object"
    required:
    - "pipeline_id"
    - "project_id"
    properties:
      id:
        type: "string"
      created_at:
        type: "string"
        format: "date-time"
      pipeline_id:
        type: "string"
      project_id:
        type: "string"
      api_key:
        type: "string"
        description: "TODO: what is the api_key"
      data_assets:
        type: "array"
        description: "List of data asset IDs"
        items:
          type: "string"
    description: "A credentials object associated with a pipeline"
    example:
      pipeline_id: "eac1j24-0f2ndl-0a3pi3df"
      project_id: "my-awesome-project-1214"
      api_key: "api_key"
      data_assets:
      - "data_assets"
      - "data_assets"
      created_at: "2000-01-23T04:56:07.000+00:00"
      id: "generated-guid-used-as-k8s-secret-name"
  apiDataset:
    allOf:
    - $ref: "#/definitions/apiAsset"
    - properties:
        domain:
          type: "string"
        format:
          type: "string"
        size:
          type: "string"
        number_of_records:
          type: "integer"
          format: "int32"
        license:
          type: "string"
        metadata:
          $ref: "#/definitions/apiMetadata"
    example:
      id: "id"
      created_at: "2020-09-15T04:56:07.000+00:00"
      name: "Fashion-MNIST"
      description: "Standardized images of fashion items from 10 classes"
      format: "CSV"
      size: "37MB"
      number_of_records: 60000
      license: "MIT"
      domain: "Image Classification"
  apiGenerateCodeResponse:
    type: "object"
    properties:
      script:
        type: "string"
        description: "The script source code to run the component in a pipeline"
    example:
      script: "TODO: Python source file content example"
  apiGenerateModelCodeResponse:
    type: "object"
    properties:
      scripts:
        type: "array"
        description: "The source code samples to use the model in a pipeline"
        items:
          $ref: "#/definitions/apiModelScript"
    example:
      scripts:
      - pipeline_stage: "train"
        execution_platform: "wml"
        script_code: "TODO: python script example"
      - pipeline_stage: "serve"
        execution_platform: "kubernetes"
        script_code: "TODO: python script example"
  apiGetTemplateResponse:
    type: "object"
    properties:
      template:
        type: "string"
        description: "The YAML template file content"
      url:
        type: "string"
        description: "The URL to download the template text from S3 storage (Minio)"
    example:
      template: "TODO: YAML file content"
      url: "http://min.io:9000/mlpipeline/components/1lBnSAce8lAXP97Yb11eqSk/train_wml.yaml"
  apiListCatalogItemsResponse:
    type: "object"
    properties:
      components:
        type: "array"
        items:
          $ref: "#/definitions/apiComponent"
      datasets:
        type: "array"
        items:
          $ref: "#/definitions/apiDataset"
      models:
        type: "array"
        items:
          $ref: "#/definitions/apiModel"
      notebooks:
        type: "array"
        items:
          $ref: "#/definitions/apiNotebook"
      pipelines:
        type: "array"
        items:
          $ref: "#/definitions/apiPipeline"
      total_size:
        type: "integer"
        format: "int32"
      next_page_token:
        type: "string"
    example:
      models:
      - id: "max-audio-classifier"
        created_at: "2019-04-23T04:56:07.000+00:00"
        name: "Max Audio Classifier"
        description: "Identify sounds in short audio clips"
        labels:
          domain: "speech recognition"
        framework:
          name: "tensorflow"
          version: "1.8"
          runtimes:
            name: "python"
            version: "3.5"
        trainable: false
        servable: true
      - id: "max-audio-classifier"
        created_at: "2019-04-23T04:56:07.000+00:00"
        name: "Max Audio Classifier"
        description: "Identify sounds in short audio clips"
        labels:
          domain: "speech recognition"
        framework:
          name: "tensorflow"
          version: "1.8"
          runtimes:
            name: "python"
            version: "3.5"
        trainable: false
        servable: true
      components:
      - id: "id"
        created_at: "2019-01-23T04:56:07.000+00:00"
        name: "Deep Learning - Train Model"
        description: "description"
        metadata:
          labels:
            platform: "IBM Watson"
        parameters:
        - name: "model_filename"
          value: "model.py"
        - name: "data_filename"
          value: "data.csv"
      - id: "id"
        created_at: "2019-01-23T04:56:07.000+00:00"
        name: "Deep Learning - Train Model"
        description: "description"
        metadata:
          labels:
            platform: "IBM Watson"
        parameters:
        - name: "model_filename"
          value: "model.py"
        - name: "data_filename"
          value: "data.csv"
      pipelines:
      - name: "name"
        created_at: "2000-01-23T04:56:07.000+00:00"
        description: "description"
        id: "id"
        status: "READY"
        parameters:
        - name: "name"
          value: "value"
        - name: "name"
          value: "value"
      - name: "name"
        created_at: "2000-01-23T04:56:07.000+00:00"
        description: "description"
        id: "id"
        status: "READY"
        parameters:
        - name: "name"
          value: "value"
        - name: "name"
          value: "value"
      next_page_token: "next_page_token"
      notebooks:
      - id: "92jh4-2nf09-soaqm5"
        created_at: "2019-07-15T14:56:07.000+00:00"
        name: "My Notebook"
        description: "Some text describing the notebook"
        metadata:
          annotations:
            platform: "OpenSource"
      - id: "92jh4-2nf09-soaqm5"
        created_at: "2019-07-15T14:56:07.000+00:00"
        name: "My Other Notebook"
        description: "Some text describing the notebook"
        metadata:
          annotations:
            platform: "OpenSource"
      total_size: 0
      datasets:
      - id: "id"
        created_at: "2020-09-15T04:56:07.000+00:00"
        name: "Fashion-MNIST"
        description: "Standardized images of fashion items from 10 classes"
        format: "CSV"
        size: "37MB"
        number_of_records: 60000
        license: "MIT"
        domain: "Image Classification"
      - id: "id"
        created_at: "2020-09-15T04:56:07.000+00:00"
        name: "Fashion-MNIST"
        description: "Standardized images of fashion items from 10 classes"
        format: "CSV"
        size: "37MB"
        number_of_records: 60000
        license: "MIT"
        domain: "Image Classification"
  apiListComponentsResponse:
    type: "object"
    properties:
      components:
        type: "array"
        items:
          $ref: "#/definitions/apiComponent"
      total_size:
        type: "integer"
        format: "int32"
      next_page_token:
        type: "string"
    example:
      components:
      - name: "name"
        created_at: "2000-01-23T04:56:07.000+00:00"
        description: "description"
        id: "id"
        parameters:
        - name: "name"
          value: "value"
        - name: "name"
          value: "value"
      - name: "name"
        created_at: "2000-01-23T04:56:07.000+00:00"
        description: "description"
        id: "id"
        parameters:
        - name: "name"
          value: "value"
        - name: "name"
          value: "value"
      next_page_token: "next_page_token"
      total_size: 10
  apiListCredentialsResponse:
    type: "object"
    properties:
      credentials:
        type: "array"
        items:
          $ref: "#/definitions/apiCredential"
      total_size:
        type: "integer"
        format: "int32"
      next_page_token:
        type: "string"
    example:
      next_page_token: "next_page_token"
      credentials:
      - pipeline_id: "eac1j24-0f2ndl-0a3pi3df"
        project_id: "my-awesome-project-1214"
        api_key: "api_key"
        data_assets:
        - "data_assets"
        - "data_assets"
        created_at: "2000-01-23T04:56:07.000+00:00"
        id: "generated-guid-used-as-k8s-secret-name"
      - pipeline_id: "eac1j24-0f2ndl-0a3pi3df"
        project_id: "my-awesome-project-1214"
        api_key: "api_key"
        data_assets:
        - "data_assets"
        - "data_assets"
        created_at: "2000-01-23T04:56:07.000+00:00"
        id: "generated-guid-used-as-k8s-secret-name"
      total_size: 0
  apiListDatasetsResponse:
    type: "object"
    properties:
      datasets:
        type: "array"
        items:
          $ref: "#/definitions/apiDataset"
      total_size:
        type: "integer"
        format: "int32"
      next_page_token:
        type: "string"
    example:
      datasets:
      - name: "name"
        created_at: "2000-01-23T04:56:07.000+00:00"
        description: "description"
        id: "id"
      - name: "name"
        created_at: "2000-01-23T04:56:07.000+00:00"
        description: "description"
        id: "id"
      next_page_token: "next_page_token"
      total_size: 2
  apiListModelsResponse:
    type: "object"
    properties:
      models:
        type: "array"
        items:
          $ref: "#/definitions/apiModel"
      total_size:
        type: "integer"
        format: "int32"
      next_page_token:
        type: "string"
    example:
      models:
      - id: "max-audio-classifier"
        created_at: "2019-04-23T04:56:07.000+00:00"
        name: "Max Audio Classifier"
        description: "Identify sounds in short audio clips"
        labels:
          domain: "speech recognition"
        framework:
          name: "tensorflow"
          version: "1.8"
          runtimes:
            name: "python"
            version: "3.5"
        trainable: false
        servable: true
      - id: "max-audio-classifier"
        created_at: "2019-04-23T04:56:07.000+00:00"
        name: "Max Audio Classifier"
        description: "Identify sounds in short audio clips"
        labels:
          domain: "speech recognition"
        framework:
          name: "tensorflow"
          version: "1.8"
          runtimes:
            name: "python"
            version: "3.5"
        trainable: false
        servable: true
      next_page_token: "next_page_token"
      total_size: 0
  apiListInferenceservicesResponse:
    type: "object"
    properties:
      Inferenceservices:
        type: "array"
        items:
          $ref: "#/definitions/apiInferenceservice"
      total_size:
        type: "integer"
        format: "int32"
      next_page_token:
        type: "string"
    example:
      next_page_token: "next_page_token"
      total_size: 0
      Inferenceservices:
      - apiVersion: "serving.kubeflow.org/v1alpha2"
        kind: "InferenceService"
        metadata:
          name: "sklearn-iris"
        spec:
          default:
            predictor:
              sklearn:
                storageUri: "gs://kfserving-samples/models/sklearn/iris"
      - apiVersion: "serving.kubeflow.org/v1alpha2"
        kind: "InferenceService"
        metadata:
          name: "sklearn-iris"
        spec:
          default:
            predictor:
              sklearn:
                storageUri: "gs://kfserving-samples/models/sklearn/iris"
  apiListNotebooksResponse:
    type: "object"
    properties:
      notebooks:
        type: "array"
        items:
          $ref: "#/definitions/apiNotebook"
      total_size:
        type: "integer"
        format: "int32"
      next_page_token:
        type: "string"
    example:
      next_page_token: "next_page_token"
      notebooks:
      - id: "92jh4-2nf09-soaqm5"
        created_at: "2019-07-15T14:56:07.000+00:00"
        name: "My Notebook"
        description: "Some text describing the notebook"
        metadata:
          annotations:
            platform: "OpenSource"
      - id: "92jh4-2nf09-soaqm5"
        created_at: "2019-07-15T14:56:07.000+00:00"
        name: "My Other Notebook"
        description: "Some text describing the notebook"
        metadata:
          annotations:
            platform: "OpenSource"
      total_size: 0
  apiListPipelinesResponse:
    type: "object"
    properties:
      pipelines:
        type: "array"
        items:
          $ref: "#/definitions/apiPipelineExtended"
      total_size:
        type: "integer"
        format: "int32"
      next_page_token:
        type: "string"
    example:
      pipelines:
      - name: "name"
        created_at: "2018-12-29T04:56:07.000+00:00"
        description: "description"
        id: "e3U42y3-au240nc-13nc"
        status: "READY"
        parameters:
        - name: "name"
          value: "value"
        - name: "name"
          value: "value"
      - name: "another pipeline"
        created_at: "2019-06-23T14:18:01.000+00:00"
        description: "another pipeline"
        id: "v92-834nat-2ndida"
        annotations:
          platform: "KFP"
      next_page_token: "next_page_token"
      total_size: 10
  apiMetadata:
    type: "object"
    properties:
      annotations:
        type: "object"
        additionalProperties:
          type: "string"
      labels:
        type: "object"
        additionalProperties:
          type: "string"
      tags:
        type: "array"
        items:
          type: "string"
    example:
      annotations: "{platform: 'IBM Watson'}"
      tags: "['keras', 'tensorflow']"
  apiInferenceservice:
    type: "object"
    required:
    - "apiVersion"
    - "kind"
    properties:
      apiVersion:
        type: "string"
      kind:
        type: "string"
      metadata:
        $ref: "#/definitions/anyValue"
      spec:
        $ref: "#/definitions/anyValue"
    example:
      apiVersion: "serving.kubeflow.org/v1alpha2"
      kind: "InferenceService"
      metadata:
        name: "sklearn-iris"
      spec:
        default:
          predictor:
            sklearn:
              storageUri: "gs://kfserving-samples/models/sklearn/iris"
  apiModel:
    allOf:
    - $ref: "#/definitions/apiAsset"
    - type: "object"
      required:
      - "framework"
      properties:
        domain:
          type: "string"
        labels:
          type: "object"
          additionalProperties:
            type: "string"
        framework:
          $ref: "#/definitions/apiModelFramework"
        trainable:
          type: "boolean"
        trainable_tested_platforms:
          type: "array"
          items:
            type: "string"
        trainable_credentials_required:
          type: "boolean"
        trainable_parameters:
          type: "array"
          items:
            $ref: "#/definitions/apiParameter"
        servable:
          type: "boolean"
        servable_tested_platforms:
          type: "array"
          items:
            type: "string"
        servable_credentials_required:
          type: "boolean"
        servable_parameters:
          type: "array"
          items:
            $ref: "#/definitions/apiParameter"
    description: "A model that can be trained and/or served."
    example:
      id: "max-audio-classifier"
      created_at: "2019-04-23T04:56:07.000+00:00"
      name: "Max Audio Classifier"
      description: "Identify sounds in short audio clips"
      labels:
        domain: "speech recognition"
      framework:
        name: "tensorflow"
        version: "1.8"
        runtimes:
          name: "python"
          version: "3.5"
      trainable: false
      servable: true
  apiModelFramework:
    type: "object"
    required:
    - "name"
    properties:
      name:
        type: "string"
      version:
        type: "string"
      runtimes:
        $ref: "#/definitions/apiModelFramework_runtimes"
    example:
      name: "tensorflow"
      version: "1.5"
      runtimes:
        name: "python"
        version: "3.5"
  apiModelScript:
    type: "object"
    required:
    - "execution_platform"
    - "pipeline_stage"
    - "script_code"
    properties:
      pipeline_stage:
        type: "string"
        description: "pipeline stage that this code sample applies to, either 'train'\
          \ or 'serve'"
      execution_platform:
        type: "string"
        description: "execution platform that this code sample applies to, i.e. 'kubernetes',\
          \ 'knative'"
      script_code:
        type: "string"
        description: "the source code to run the model in a pipeline stage"
    example:
      pipeline_stage: "serve"
      execution_platform: "kubernetes"
      script_code: "TODO: python script example"
  apiNotebook:
    allOf:
    - $ref: "#/definitions/apiAsset"
    - required:
      - "url"
      properties:
        url:
          type: "string"
          description: "The URL to the notebook source file (.ipynb) on GitHub.com"
        metadata:
          $ref: "#/definitions/apiMetadata"
        parameters:
          type: "array"
          items:
            $ref: "#/definitions/apiParameter"
    description: "A notebook component."
  apiParameter:
    type: "object"
    required:
    - "name"
    properties:
      name:
        type: "string"
      description:
        type: "string"
      default:
        $ref: "#/definitions/anyValue"
      value:
        $ref: "#/definitions/anyValue"
    example:
      name: "name"
      value: "value"
  apiPipeline:
    type: "object"
    properties:
      id:
        type: "string"
      created_at:
        type: "string"
        format: "date-time"
      name:
        type: "string"
      description:
        type: "string"
      parameters:
        type: "array"
        items:
          $ref: "#/definitions/apiParameter"
      status:
        type: "string"
        description: "In case any error happens retrieving a pipeline field, only\
          \ pipeline ID\nand the error message is returned. Client has the flexibility\
          \ of choosing\nhow to handle error. This is especially useful during listing\
          \ call."
      default_version_id:
        type: "string"
        description: "The default version of the pipeline. As of now, the latest version\
          \ is used as default. (In the future, if desired by customers, we can allow\
          \ them to set default version.)"
        readOnly: true
      namespace:
        type: "string"
    example:
      name: "name"
      created_at: "2000-01-23T04:56:07.000+00:00"
      description: "description"
      id: "id"
      status: "READY"
      parameters:
      - name: "name"
        value: "value"
      - name: "name"
        value: "value"
  apiPipelineExtension:
    type: "object"
    properties:
      id:
        type: "string"
      annotations:
        type: "object"
        additionalProperties:
          type: "string"
      featured:
        type: "boolean"
      publish_approved:
        type: "boolean"
    example:
      id: "id"
      annotations:
        platform: "KFP"
  apiPipelineExtended:
    allOf:
    - $ref: "#/definitions/apiPipeline"
    - $ref: "#/definitions/apiPipelineExtension"
    description: "A representation of a pipeline with extended properties."
  apiPipelineCustomRunPayload:
    type: "object"
    properties:
      custom_pipeline:
        $ref: "#/definitions/apiPipelineCustom"
      run_parameters:
        $ref: "#/definitions/dictionary"
    description: "Wrapper object to post a custom pipeline run defined by a directed\
      \ acyclic graph (DAG) and input parameters."
  apiPipelineCustom:
    type: "object"
    required:
    - "dag"
    - "name"
    properties:
      dag:
        $ref: "#/definitions/apiPipelineDAG"
      inputs:
        $ref: "#/definitions/apiPipelineInputs"
      name:
        type: "string"
        description: "Name of the custom pipeline"
      description:
        type: "string"
        description: "Optional description of the custom pipeline"
    description: "A custom pipeline defined by a directed acyclic graph (DAG) and\
      \ input parameters."
  apiPipelineInputs:
    type: "object"
    properties:
      parameters:
        type: "array"
        description: "List of pipeline parameters"
        items:
          $ref: "#/definitions/apiParameter"
    description: "Input parameters to custom pipeline"
  apiPipelineDAG:
    type: "object"
    properties:
      tasks:
        type: "array"
        description: "List of pipeline tasks."
        items:
          $ref: "#/definitions/apiPipelineTask"
    description: "A directed acyclic graph (DAG) describing a complex pipeline"
  apiPipelineTask:
    type: "object"
    required:
    - "artifact_id"
    - "artifact_type"
    properties:
      name:
        type: "string"
      artifact_type:
        type: "string"
        description: "The type of artifact for this task, can be either one of: 'component',\
          \ 'model', 'notebook', 'pipeline'"
      artifact_id:
        type: "string"
        description: "The UUID of the artifact for this task"
      arguments:
        $ref: "#/definitions/apiPipelineTaskArguments"
      dependencies:
        type: "array"
        description: "Task dependencies, referring to upstream tasks that have to\
          \ be completed prior to running this task by their respective task names"
        items:
          type: "string"
    description: "A custom pipeline task as part of a directed acyclic graph (DAG)."
  apiPipelineTaskArguments:
    type: "object"
    properties:
      parameters:
        type: "array"
        items:
          $ref: "#/definitions/apiParameter"
    description: "Arguments to a custom pipeline task as part of a directed acyclic\
      \ graph (DAG)."
  apiRunCodeResponse:
    type: "object"
    required:
    - "run_url"
    properties:
      run_url:
        type: "string"
        description: "The URL path to view the run details in the Kubeflow Pipeline\
          \ Web UI"
      run_output_location:
        type: "string"
        description: "The location of the output artifacts produced by the run, if\
          \ any."
    example:
      run_url: "/runs/details/0e2680ec-5d5a-11e9-9911-5ed556129669"
  apiSettings:
    type: "object"
    required:
    - "sections"
    properties:
      sections:
        type: "array"
        description: "List of configuration categories."
        items:
          $ref: "#/definitions/apiSettingsSection"
    description: "List of application settings grouped into categories (sections)."
    example:
      sections:
      - settings:
        - name: "name"
          value: "value"
        - name: "name"
          value: "value"
        name: "name"
        description: "description"
      - settings:
        - name: "name"
          value: "value"
        - name: "name"
          value: "value"
        name: "name"
        description: "description"
  apiSettingsSection:
    type: "object"
    required:
    - "name"
    properties:
      name:
        type: "string"
        description: "Display name of the configuration category."
      description:
        type: "string"
        description: "Display text of the configuration category."
      settings:
        type: "array"
        description: "List of settings."
        items:
          $ref: "#/definitions/apiParameter"
    description: "List of application settings grouped into one category (section)."
    example:
      settings:
      - name: "name"
        value: "value"
      - name: "name"
        value: "value"
      name: "name"
      description: "description"
  apiStatus:
    type: "object"
    properties:
      error:
        type: "string"
      code:
        type: "integer"
        format: "int32"
      details:
        type: "array"
        items:
          $ref: "#/definitions/protobufAny"
  apiUrl:
    type: "object"
    properties:
      pipeline_url:
        type: "string"
  anyValue:
    description: "A non-null value of any type like string, number, boolean, array,\
      \ object, see https://stackoverflow.com/a/43328994/5601796 (swagger-2-0-what-schema-to-accept-any-complex-json-value)"
  dictionary:
    type: "object"
    description: "A dictionary of key-value pairs with values of any type."
    example:
      some_key: "some value"
      another_key: true
      some_number: 42
    additionalProperties:
      $ref: "#/definitions/anyValue"
  protobufAny:
    type: "object"
    properties:
      type_url:
        type: "string"
        description: "TODO"
      value:
        type: "string"
        format: "byte"
        description: "Must be a valid serialized protocol buffer of the above specified\
          \ type."
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
        x-regex: "^(?:[A-Za-z0-9+\\/]{4})*(?:[A-Za-z0-9+\\/]{2}==|[A-Za-z0-9+\\/]{3}=)?$"
        x-modifiers: []
    description: "TODO"
  apiModelFramework_runtimes:
    type: "object"
    properties:
      name:
        type: "string"
      version:
        type: "string"
